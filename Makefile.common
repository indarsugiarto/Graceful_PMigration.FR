# If compilation is performed inside QtCreator, then SPINN_DIRS is not defined
ifndef SPINN_DIRS
    SPINN_DIRS := /opt/spinnaker_tools_134
    SPINN_TOOLS := /opt/spinnaker_tools_134/tools
endif

ifndef GNUBIN
    GNUBIN := /opt/arm-2013.05/bin
endif

# We mainly use GNU toolchain
GNU := 1

# pmagent might use SARK (0), but apps might use API (1)
ifndef API
    API := 1
endif

# Set to 1 to make Thumb code (0 for ARM)
THUMB := 1

# Prefix for GNU tool binaries
GP  := $(GNUBIN)/arm-none-eabi

LIB_DIR := $(SPINN_DIRS)/lib
INC_DIR := $(SPINN_DIRS)/include
BUILD_DIR := build/
LNK_SCRIPT := ../include/$(SCRIPT)

#-------------------------------------------------------------------------------

# Set up the various compile/link options for GNU and ARM tools

# GNU tool setup
ifeq ($(GNU),1)
  AS := $(GP)-as --defsym GNU=1 -mthumb-interwork -march=armv5te
  CA := $(GP)-gcc -c -Os -mthumb-interwork -march=armv5te -std=gnu99 -I $(INC_DIR)
  CT := $(CA) -mthumb -DTHUMB

ifeq ($(API),1)
  LIBRARY := $(LIB_DIR)/libspin1_api.a
else
  LIBRARY := $(LIB_DIR)/libsark.a
endif

  LD := $(GP)-gcc -T$(SCRIPT) -Wl,-e,cpu_reset -Wl,--gc-sections -Wl,--use-blx 
  AR := $(GP)-ar -rcs
  OC := $(GP)-objcopy
  OD := $(GP)-objdump -dxt > $(BUILD_DIR)$(APP).txt

# ARM tool setup
else
  AS := armasm --keep --cpu=5te --apcs /interwork
  CA := armcc -c --c99 --cpu=5te --apcs /interwork --min_array_alignment=4 -I $(INC_DIR)
  CT := $(CA) --thumb -DTHUMB

ifeq ($(LIB),1)
  CFLAGS += --split_sections
endif

ifeq ($(API),1)
  LIBRARY := $(LIB_DIR)/spin1_api.a
else
  LIBRARY := $(LIB_DIR)/sark.a
endif

  LD := armlink --scatter=$(SCRIPT) --remove --entry cpu_reset
  AR := armar -rcs
  OC := fromelf
  OD := fromelf -cds --output $(APP).txt
endif

ifeq ($(THUMB),1)
  CC := $(CT)
else
  CC := $(CA)
endif

CAT := \cat
RM  := \rm -f
LS  := \ls -l
RM  := \rm -f
MKDIR := \mkdir -p
CP  := \cp -rf

#-------------------------------------------------------------------------------

# Build the application

# Primary target is an APLX file - built from the ELF
$(APP).aplx: $(APP).elf
ifeq ($(GNU),1)
	$(OC) -O binary -j RO_DATA -j .ARM.exidx $(BUILD_DIR)$(APP).elf $(BUILD_DIR)RO_DATA.bin
	$(OC) -O binary -j RW_DATA $(BUILD_DIR)$(APP).elf $(BUILD_DIR)RW_DATA.bin
	$(SPINN_TOOLS)/mkbin $(BUILD_DIR)RO_DATA.bin $(BUILD_DIR)RW_DATA.bin > $(BUILD_DIR)$(APP).bin
else
	$(OC) --bin --output $(APP).bin $(APP).elf
endif
	$(SPINN_TOOLS)/mkaplx $(BUILD_DIR)$(APP).elf | $(CAT) - $(BUILD_DIR)$(APP).bin > $(BUILD_DIR)$(APP).aplx
	@$(CP) $(BUILD_DIR)$(APP).aplx $(OUTPUT_DIR)
	@$(LS) $(OUTPUT_DIR)$(APP).aplx

# Build the ELF file
$(APP).elf: $(BUILD_DIR)$(OBJECTS) $(SCRIPT) $(LIBRARY) 
	@$(MKDIR) $(BUILD_DIR)
	$(SPINN_TOOLS)/mkbuild $(APP) > $(BUILD_DIR)sark_build.c
	$(CC) $(BUILD_DIR)sark_build.c -o $(BUILD_DIR)sark_build.o
	$(LD) $(LFLAGS) $(BUILD_DIR)$(OBJECTS) $(BUILD_DIR)sark_build.o $(LIBRARY) -o $(BUILD_DIR)$(APP).elf
	$(OD) $(BUILD_DIR)$(APP).elf


# Build the main object file.
$(BUILD_DIR)$(APP).o: $(APP).c
	@$(MKDIR) $(BUILD_DIR)
	$(CC) $(CFLAGS) $(APP).c -o $(BUILD_DIR)$(APP).o

clean:
	@$(RM) $(BUILD_DIR)*

#-------------------------------------------------------------------------------
